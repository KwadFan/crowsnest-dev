#!/usr/bin/env bash

#### Crowsnest Core Application.

#### crowsnest - A webcam Service for multiple Cams and Stream Services.
####
#### Written by Stephan Wendel aka KwadFan <me@stephanwe.de>
#### Copyright 2021 - till today
#### https://github.com/mainsail-crew/crowsnest
####
#### This File is distributed under GPLv3
####

# shellcheck enable=require-variable-braces

# Exit upon Errors
set -Ee

CN_WORKDIR_PATH="$(dirname "$(readlink -f "${0}")")"
declare -gr CN_WORKDIR_PATH

CN_SELF_TITLE="crowsnest - A webcam service for multiple cams and stream services."
# shellcheck disable=SC2034
declare -gr CN_SELF_TITLE

CN_SELF_DEPS=(crudini find xargs)
# shellcheck disable=SC2034
declare -gr CN_SELF_DEPS

cn_import_components() {
    local -a components
    local files
    files="$(find "${CN_WORKDIR_PATH}/components/" -type f -not -name '.*' -printf '%f\n')"
    for file in ${files}; do
        components+=("${file}")
    done
    for component in "${components[@]}"; do
        # shellcheck disable=SC1090
        . "${CN_WORKDIR_PATH}"/components/"${component}"
    done
}

cn_err_exit() {
    local file_trace func_trace line_trace
    read -r LINE FUNC FILE < <(caller 0)
    func_trace="${FUNC}"
    file_trace="$(basename "${FILE}")"
    line_trace="${LINE}"
    if [ "${1}" != "0" ] && [[ "${CN_SELF_LOG_LEVEL}" = "debug" ]]; then
        cn_log_sect_header "BEGINN DEBUG TRACE"
        cn_log_msg "ERROR: Error ${1} occured on line ${line_trace}"
        cn_log_msg "==> Error occured in file: ${file_trace} -> ${func_trace}"
        cn_log_sect_header "ERROR DUMP"
        cn_log_msg "..."
        grep -B 2 -A 5 -n "${func_trace}" "${FILE}" | cn_log_err_dump
        cn_log_msg "..."
        cn_log_sect_header "END DEBUG TRACE"
    fi
    if [ -n "$(jobs -pr)" ]; then
        jobs -pr | while IFS='' read -r job_id; do
            kill "${job_id}"
        done
    fi
    exit 1
}

cn_shutdown() {
    cn_log_msg "Shutdown or Killed by User!"
    cn_log_msg "Please come again :)"
    if [ -n "$(jobs -pr)" ]; then
        jobs -pr | while IFS='' read -r job_id; do
            kill "${job_id}"
        done
    fi
    cn_log_msg "Goodbye..."
    exit 0
}

main() {
    ### Import components
    cn_import_components

    ### Init traps
    trap 'cn_shutdown' 1 2 3 15
    trap 'cn_err_exit $? $LINENO' ERR

    ### Parse Args
    ## file: arg_parser.sh
    cn_init_argparse "${@}"

    ### Init config parsing, put config to Vars
    ## file: config_parser.sh
    cn_init_config_parse

    ### Init logging, get/set loglevel
    ## file: logging.sh
    cn_init_logging

    ### Print Host informations
    ## file: host_info.sh
    if [[ "${CN_SELF_LOG_LEVEL}" != "quiet" ]]; then
        cn_init_print_host
    fi

    ### Check for Crownest dependencies
    ## file: self_dep_check.sh
    cn_init_check_deps

    ### Log /boot/config.txt if exist
    ## file: log_config_file.sh
    if [[ "${CN_SELF_LOG_LEVEL}" = "debug" ]]; then
        cn_print_cfg
    fi

    ### Get/Set available Backends
    ## file: log_avail_backend.sh
    cn_init_check_backends

    ### Get backend versions, and write to log depending on Loglevel
    ## file: log_backend_version.sh
    if [[ "${CN_SELF_LOG_LEVEL}" != "quiet" ]]; then
        cn_init_backend_version
    fi

    # ---------------------- Beginn hardware handling ----------------------
    ### Get/Set available USB Cams
    ## file: hw_uvc_dev.sh
    cn_init_hw_uvc

    ### Get available 'libcamera' devices and binary paths
    ## file: hw_libcamera.sh
    cn_init_hw_libcamera

    ### Get available 'libcamera' controls
    ## file: log_libcamera_ctrls.sh
    cn_init_libcamera_controls

    ### Get available 'legacy' devices and binary paths
    ## file: hw_legacy_cam.sh
    cn_init_hw_legacy

    ## file: log_avail_cams.sh
    cn_init_print_devices
    # ---------------------- End hardware handling ----------------------

    # ---------------------- Beginn configuration handling ----------------------
    ### Inspect given config file for errors.
    ## file: deep_config_check.sh
    cn_init_deep_config_check

    ### Setup camera due v4l2-ctl or camera-streamer (depends on used 'mode')
    ## file: v4l2_control.sh
    cn_init_v4l2ctl

    # ---------------------- End configuration handling ----------------------

    ### Init configured streamer/devices
    ## file: init_streams.sh
    cn_init_streams

    ### Prepare watchdog runtime
    ## file: watchdog.sh
    cn_init_watchdog

    while true; do
        ### Jail Crowsnest into loop using watchdog
        ## file: watchdog.sh
        cn_watchdog_runtime
    done
}

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
    main "${@}"
fi
